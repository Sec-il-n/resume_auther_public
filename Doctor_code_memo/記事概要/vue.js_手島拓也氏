事業担当者から技術選定のヒアリング
エンジニアリング知識がない方が作ろうとするサービス=規模が大きくなる傾向
->
エンジニアの目線削ぎ落とし
いったん「とりあえずつけたい機能」を削る
ミニマムなプロダクトを3ヶ月以内にリリースする
→ミニマムなプロダクトをスピーディに作るという場合にはVue.jsが活躍
↕︎
動的なUIをまずは必要としないため、Vue.jsを使わないケース
  トップページ、一覧ページ、詳細ページあとは管理画面があり、
  機能としては申し込み機能のみ

Vue.jsは基本的にはMVVMパターン
Model、View、ViewModelがあり、ViewにModelを渡して*1双方向バインディングしている
    MVVMパターン注意点
    1枚のページ内でいろいろなコンポーネントが複雑に動くようなUIを作った場合
    （シングルページアプリケーションなど）
    →
    モデルを引き渡してバインディング、バインディング...x1000
    不具合が起きる危険性
↕︎
Fluxアーキテクチャ
コンポーネントとデータを分離
データをいじるなら必ずActionを通る
＝
Vue.jsにおいてはVuexが当該考え方

Vuex採用基準
1つの画面上に親子関係以外のコンポーネント間のやり取りがすごく多くなりそうであったらVuexを使う


--------------------------------------------------------
*1
スクリプト側から値の設定とブラウザからの入力のどちらから行っても双方向で値を更新できる仕組み


歴史他
jQueryの時代　｜　その後MVVMの時代　｜　FacebookがReactを発表
　　　　　　　　　　　　　　　　　　　｜　Fluxアーキテクチャ
React.js
Facebook
基本的にコンパイルをしないと動かない
JSX (JS拡張構文)→webpackを使ってJSに変換

Vue.js
個人開発。Evan You
コントリビューターもいるため、個人依存で変な独自進化をしていくということはない。
Vue.jsのファイルをスクリプトの中に読み込み→記載
すればコンポーネントが動作する


========================================================
コンポーネント
・コンポーネントごとに実装(が全部閉じる)
・再利用性、メンテナンス容易

・コンポーネントの世界はidを使うのはNG

・WebサイトランディングページをWordPressで作る→jQueryは現役で活躍
この領域ではVue.jsに乗り換える必要がないかも
→
・少しインタラクティブなアプリケーションとなると、jQueryは破綻

・Vue.jsでコンポーネントを作ったのにグローバルにDOMをいじってしまったら意味がない


========================================================
開発環境おすすめ
VSCode
プラグイン
Vetur、ESLint、Prettierなどを入れておくと自動的に整形される

========================================================
コンポーネント設計のポイント
画面のイメージを作ってその要素が単体で再利用性があるかどうかという観点で考えてみる

例）
ユーザの基本情報を取得し、住所情報を取得したい

再利用される期待があるものだけをコンポーネント化する


コンポーネント間のデータの渡し方
・親→子
props

・子→親
$emit
onChangeイベントなどのアクションや「次へ」ボタンなどのアクションで親コンポーネントにデータを$emitを利用して渡す

  複数の子コンポーネントに入力されたデータ
  ↓↓↓
  親コンポーネントに集約
  ⬇︎
  すべてのデータをサーバに転送する

・兄弟⇄
例）チャットアプリのように、スレッドの一覧画面とチャットの詳細画面があるもの
store
